name: PR Checks

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened, ready_for_review]

jobs:
  pr-checks:
    name: PR Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linter
      run: npm run lint
      
    - name: Run tests
      run: npm test
      
    - name: Check test coverage
      run: |
        echo "Running tests with coverage..."
        npm test
        echo "✅ All tests passed!"
        
    - name: Comment PR with test results
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('## 🧪 Test Results')
          );
          
          const testStatus = '${{ job.status }}' === 'success' ? '✅ PASSED' : '❌ FAILED';
          const commentBody = `## 🧪 Test Results
          
          **Status:** ${testStatus}
          **Node.js Version:** 20.x
          **Tests Run:** All Jasmine test suites
          
          ${testStatus === '✅ PASSED' ? 
            'All tests are passing! This PR is ready for review.' : 
            'Some tests failed. Please check the workflow logs for details.'
          }
          
          ---
          *This comment was automatically generated by GitHub Actions*`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: commentBody
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody
            });
          }
